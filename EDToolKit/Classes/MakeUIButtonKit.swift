////  MakeUIButtonKit.swift//  Pods////  Created by 은아월 on 2017. 4. 13..////import Foundationimport UIKitpublic class MakeUIButtonKit {        open static let shared = MakeUIButtonKit()    public init() {            }        open func makeButton(title: String, contentSize: CGRect, addView: AnyObject) -> UIButton {        let mainButton: UIButton = UIButton(frame: contentSize)        buttonBasicWork(button: mainButton)        mainButton.setTitle(title, for: .normal)        addView.addSubview(mainButton)                return mainButton    }        open func makeButton(titleImage: UIImage, contentSize: CGRect, addView: AnyObject) -> UIButton {        let mainButton: UIButton = UIButton(frame: contentSize)        buttonBasicWork(button: mainButton)        mainButton.setImage(titleImage, for: .normal)        addView.addSubview(mainButton)                return mainButton    }        open func textDecoration(button: UIButton, fontName: String?, fontSize: CGFloat?, color: UIColor?, pressColor: UIColor?) {        if fontSize != nil && fontName != nil {            button.titleLabel!.font = UIFont(name: fontName!, size: fontSize!)        } else {            if fontSize != nil {                button.titleLabel!.font = UIFont(name: "Helvetica", size: fontSize!)            } else if fontName != nil {                button.titleLabel!.font = UIFont(name: fontName!, size: 14.0)            }        }                if color != nil {            button.setTitleColor(color!, for: .normal)        }                if pressColor != nil {            button.setTitleColor(pressColor!, for: .highlighted)        }    }        open func containerDecoration(button: UIButton, layerColor: UIColor?, layerWidth: CGFloat?, bgColor: UIColor?, corner: CGFloat?) {        if layerColor != nil && layerWidth != nil {            button.layer.borderColor = layerColor!.cgColor            button.layer.borderWidth = layerWidth!        } else {            if layerColor != nil {                button.layer.borderColor = layerColor!.cgColor            } else if layerWidth != nil {                button.layer.borderWidth = layerWidth!            }        }                if bgColor != nil {            button.backgroundColor = bgColor!        }                if corner != nil {            button.layer.cornerRadius = corner!        }    }        // MARK : CustomButton Decoration    open func customButtonBasicSetting(customBtn: AnyObject, mainBg: UIColor?, pressBg: UIColor?, mainLayer: UIColor?, pressLayer: UIColor?, mainTxt: UIColor?, pressTxt: UIColor?) {        if customBtn is ClickBgEffectButton {            if mainBg != nil {                (customBtn as! ClickBgEffectButton).mainColor = mainBg!            }                        if pressBg != nil {                (customBtn as! ClickBgEffectButton).pressColor = pressBg!            }            return        }                if customBtn is ClickLayerEffectButton {            if mainLayer != nil {                (customBtn as! ClickLayerEffectButton).mainBorderLayer = mainLayer!            }                        if pressLayer != nil {                (customBtn as! ClickLayerEffectButton).pressBorderLayer = pressLayer!            }            return        }                if customBtn is ClickBgAndTextEffectButton {            if mainBg != nil {                (customBtn as! ClickBgAndTextEffectButton).mainBgColor = mainBg!            }                        if pressBg != nil {                (customBtn as! ClickBgAndTextEffectButton).pressBgColor = pressBg!            }                        if mainTxt != nil {                (customBtn as! ClickBgAndTextEffectButton).mainTextColor = mainTxt!            }                        if pressTxt != nil {                (customBtn as! ClickBgAndTextEffectButton).pressTextColor = pressTxt!            }            return        }                if customBtn is ClickLayerAndTextEffectButton {            if mainLayer != nil {                (customBtn as! ClickLayerAndTextEffectButton).mainLayerColor = mainLayer!            }            if pressLayer != nil {                (customBtn as! ClickLayerAndTextEffectButton).pressLayerColor = pressLayer!            }            if mainTxt != nil {                (customBtn as! ClickLayerAndTextEffectButton).mainTextColor = mainTxt!            }            if pressTxt != nil {                (customBtn as! ClickLayerAndTextEffectButton).pressTextColor = pressTxt!            }            return        }                //ClickMultiEffectButton        // MARK : 2017.04.25 MultiEffectButton 으로 되어있지 않던것들에 대해 수정.        if mainBg != nil {            (customBtn as! ClickMultiEffectButton).mainBgColor = mainBg!        }        if pressBg != nil {            (customBtn as! ClickMultiEffectButton).pressBgColor = pressBg!        }        if mainLayer != nil {            (customBtn as! ClickMultiEffectButton).mainLayerColor = mainLayer!        }        if pressLayer != nil {            (customBtn as! ClickMultiEffectButton).pressLayerColor = pressLayer!        }        if mainTxt != nil {            (customBtn as! ClickMultiEffectButton).mainTextColor = mainTxt!        }        if pressTxt != nil {            (customBtn as! ClickMultiEffectButton).pressTextColor = pressTxt!        }    }        // MARK : Make Button basic    func buttonBasicWork(button: UIButton) {        button.translatesAutoresizingMaskIntoConstraints = false        button.setTitleColor(UIColor.black, for: .normal)        button.titleLabel?.font = UIFont(name: "Helvetica".localized, size: 14)    }}